import sqlite3
import logging
import config
import csv
from pathlib import Path
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton,
    ReplyKeyboardRemove
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import Command
import asyncio

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot = Bot(token=config.TOKEN)
dp = Dispatcher()

# –®–ª—è—Ö–∏ –¥–æ —Ñ–∞–π–ª—ñ–≤
DATA_FILE = Path("shoes_data.csv")
DB_FILE = Path("shoes.db")

# –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å—Ç–∞–Ω—ñ–≤
class UserInfo(StatesGroup):
    name = State()
    want_to_buy = State()
    size = State()
    style = State()
    shoe_type = State()
    confirm_order = State()
    more_shopping = State()

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
def init_db():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS shoes (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            brand TEXT NOT NULL,
            size INTEGER NOT NULL,
            style TEXT NOT NULL,
            type TEXT NOT NULL,
            price REAL NOT NULL,
            UNIQUE(brand, size, style, type)
        )
    """)
    
    cursor.execute("SELECT COUNT(*) FROM shoes")
    count = cursor.fetchone()[0]
    
    if count == 0:
        sample_data = [
            ("Nike Air Max", 42, "sport", "sneakers", 3499),
            ("Adidas Ultraboost", 41, "sport", "sneakers", 3999),
            ("Puma RS-X", 40, "casual", "sneakers", 2799),
            ("Reebok Classic", 43, "casual", "sneakers", 2599),
            ("Ecco Soft 7", 44, "formal", "shoes", 4599),
            ("Geox Uomo", 42, "formal", "shoes", 3899),
            ("Timberland Premium", 45, "outdoor", "boots", 5999),
            ("Columbia Newton Ridge", 41, "outdoor", "boots", 4299),
            ("New Balance 574", 39, "casual", "sneakers", 3199),
            ("Skechers Go Walk", 40, "casual", "shoes", 2499),
            ("Clarks Desert Boot", 42, "formal", "boots", 3799),
            ("Salomon XA Pro", 43, "sport", "boots", 4999),
            ("Vans Old Skool", 38, "casual", "sneakers", 2299),
            ("Dr. Martens 1460", 44, "formal", "boots", 5499),
            ("Asics Gel-Kayano", 42, "sport", "sneakers", 4799)
        ]
        
        cursor.executemany("""
            INSERT OR IGNORE INTO shoes (brand, size, style, type, price)
            VALUES (?, ?, ?, ?, ?)
        """, sample_data)
        conn.commit()
        logging.info(f"–î–æ–¥–∞–Ω–æ {len(sample_data)} –∑–∞–ø–∏—Å—ñ–≤ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")
    
    conn.close()

init_db()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –¥–ª—è –≤–∏–±–æ—Ä—É
def get_base_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫"), KeyboardButton(text="üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫")]
        ],
        resize_keyboard=True
    )

def get_yes_no_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–¢–∞–∫"), KeyboardButton(text="–ù—ñ")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫"), KeyboardButton(text="üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫")]
        ],
        resize_keyboard=True
    )

def get_style_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="sport"), KeyboardButton(text="casual")],
            [KeyboardButton(text="formal"), KeyboardButton(text="outdoor")],
            [KeyboardButton(text="‚Ü©Ô∏è –ù–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫"), KeyboardButton(text="üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫")]
        ],
        resize_keyboard=True
    )

def get_type_keyboard(style: str):
    if style == "sport":
        types = ["sneakers", "boots"]
    elif style == "casual":
        types = ["sneakers", "shoes"]
    elif style == "formal":
        types = ["shoes", "boots"]
    else:  # outdoor
        types = ["boots"]
    
    keyboard = []
    row = []
    for t in types:
        row.append(KeyboardButton(text=t))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    
    keyboard.append([KeyboardButton(text="‚Ü©Ô∏è –ù–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫"), KeyboardButton(text="üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫")])
    
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def get_confirm_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è", callback_data="confirm")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ])

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ä–æ–∑–º—ñ—Ä—ñ–≤ –∑ –±–∞–∑–∏
def get_available_sizes():
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    cursor.execute("SELECT DISTINCT size FROM shoes ORDER BY size")
    sizes = [str(size[0]) for size in cursor.fetchall()]
    conn.close()
    return sizes

# –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(UserInfo.name)
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?", reply_markup=ReplyKeyboardRemove())

# –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
async def handle_navigation(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    user_data = await state.get_data()
    
    if message.text == "üè† –ù–∞ –ø–æ—á–∞—Ç–æ–∫":
        await start(message, state)
        return True
    
    elif message.text == "‚Ü©Ô∏è –ù–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π –∫—Ä–æ–∫":
        if current_state == UserInfo.want_to_buy.state:
            await state.set_state(UserInfo.name)
            await message.answer("–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—è?", reply_markup=ReplyKeyboardRemove())
        elif current_state == UserInfo.size.state:
            await state.set_state(UserInfo.want_to_buy)
            await message.answer(f"{user_data.get('name', '')}, —Ö–æ—á–µ—Ç–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≤–∑—É—Ç—Ç—è?", reply_markup=get_yes_no_keyboard())
        elif current_state == UserInfo.style.state:
            await state.set_state(UserInfo.size)
            available_sizes = get_available_sizes()
            await message.answer(
                f"–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: {', '.join(available_sizes)}\n"
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è:",
                reply_markup=get_base_keyboard()
            )
        elif current_state == UserInfo.shoe_type.state:
            await state.set_state(UserInfo.style)
            await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å –≤–∑—É—Ç—Ç—è:", reply_markup=get_style_keyboard())
        elif current_state == UserInfo.confirm_order.state:
            await state.set_state(UserInfo.shoe_type)
            await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∑—É—Ç—Ç—è:", 
                               reply_markup=get_type_keyboard(user_data.get('style', '')))
        elif current_state == UserInfo.more_shopping.state:
            await state.set_state(UserInfo.want_to_buy)
            await message.answer("–•–æ—á–µ—Ç–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≤–∑—É—Ç—Ç—è?", reply_markup=get_yes_no_keyboard())
        return True
    return False

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–º–µ–Ω—ñ
@dp.message(UserInfo.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(UserInfo.want_to_buy)
    await message.answer(f"–ü—Ä–∏—î–º–Ω–æ –ø–æ–∑–Ω–∞–π–æ–º–∏—Ç–∏—Å—è, {message.text}! –•–æ—á–µ—Ç–µ –ø—ñ–¥—ñ–±—Ä–∞—Ç–∏ –≤–∑—É—Ç—Ç—è?", 
                        reply_markup=get_yes_no_keyboard())

# –û–±—Ä–æ–±–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –ø—Ä–æ –ø–æ–∫—É–ø–∫—É
@dp.message(UserInfo.want_to_buy)
async def process_want_to_buy(message: types.Message, state: FSMContext):
    if await handle_navigation(message, state):
        return
    
    if message.text not in ["–¢–∞–∫", "–ù—ñ"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'", reply_markup=get_yes_no_keyboard())
        return
    
    if message.text == "–ù—ñ":
        await message.answer("–î–æ–±—Ä–µ, –∑–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –±—É–¥—å-–∫–æ–ª–∏! –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–ø–∏—à—ñ—Ç—å /start", 
                           reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        available_sizes = get_available_sizes()
        await state.set_state(UserInfo.size)
        await message.answer(
            f"–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: {', '.join(available_sizes)}\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è:",
            reply_markup=get_base_keyboard()
        )

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–æ–∑–º—ñ—Ä—É
@dp.message(UserInfo.size)
async def get_size(message: types.Message, state: FSMContext):
    if await handle_navigation(message, state):
        return
    
    if not message.text.isdigit():
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 42)", reply_markup=get_base_keyboard())
        return
    
    size = int(message.text)
    available_sizes = [int(s) for s in get_available_sizes()]
    
    if size not in available_sizes:
        await message.answer(f"–ù–∞ –∂–∞–ª—å, —Ä–æ–∑–º—ñ—Ä—É {size} –Ω–µ–º–∞—î –≤ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ. –û–±–µ—Ä—ñ—Ç—å –±—É–¥—å –ª–∞—Å–∫–∞ —ñ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä.", 
                           reply_markup=get_base_keyboard())
        return
    
    await state.update_data(size=size)
    await state.set_state(UserInfo.style)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å –≤–∑—É—Ç—Ç—è:", reply_markup=get_style_keyboard())

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∏–ª—é
@dp.message(UserInfo.style)
async def get_style(message: types.Message, state: FSMContext):
    if await handle_navigation(message, state):
        return
    
    if message.text not in ["sport", "casual", "formal", "outdoor"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Å—Ç–∏–ª—å –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏", reply_markup=get_style_keyboard())
        return
    
    await state.update_data(style=message.text)
    await state.set_state(UserInfo.shoe_type)
    await message.answer("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –≤–∑—É—Ç—Ç—è:", reply_markup=get_type_keyboard(message.text))

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–∏–ø—É —ñ –ø–æ—à—É–∫ –≤–∑—É—Ç—Ç—è
@dp.message(UserInfo.shoe_type)
async def get_shoes_type(message: types.Message, state: FSMContext):
    if await handle_navigation(message, state):
        return
    
    user_data = await state.get_data()
    style = user_data.get('style', '')
    available_types = {
        "sport": ["sneakers", "boots"],
        "casual": ["sneakers", "shoes"],
        "formal": ["shoes", "boots"],
        "outdoor": ["boots"]
    }.get(style, [])
    
    if message.text not in available_types:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏", 
                           reply_markup=get_type_keyboard(style))
        return
    
    await state.update_data(shoe_type=message.text)
    shoe = find_shoe(user_data['size'], style, message.text)
    
    if shoe:
        await state.update_data(current_shoe=shoe)
        response = (
            f"{user_data.get('name', '')}, –º–∏ –ø—ñ–¥—ñ–±—Ä–∞–ª–∏ –¥–ª—è –≤–∞—Å:\n\n"
            f"üè∑ –ë—Ä–µ–Ω–¥: {shoe[1]}\n"
            f"üìè –†–æ–∑–º—ñ—Ä: {shoe[2]}\n"
            f"üé® –°—Ç–∏–ª—å: {shoe[3]}\n"
            f"üëü –¢–∏–ø: {shoe[4]}\n"
            f"üíµ –¶—ñ–Ω–∞: {shoe[5]} UAH\n\n"
            f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:"
        )
        await message.answer(response, reply_markup=ReplyKeyboardRemove())
        await message.answer("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è?", reply_markup=get_confirm_keyboard())
        await state.set_state(UserInfo.confirm_order)
    else:
        await message.answer("–ù–∞ –∂–∞–ª—å, –Ω–µ–º–∞—î –≤–∑—É—Ç—Ç—è, —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä—ñ—è–º.")
        await state.set_state(UserInfo.more_shopping)
        await message.answer("–ß–∏ –±–∞–∂–∞—î—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —ñ–Ω—à—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏?", reply_markup=get_yes_no_keyboard())

# –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
@dp.callback_query(UserInfo.confirm_order, F.data.in_(["confirm", "cancel"]))
async def process_confirmation(callback: types.CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    name = user_data.get('name', '')
    
    if callback.data == "confirm":
        shoe = user_data['current_shoe']
        order_details = (
            f"‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–æ!\n\n"
            f"–î–µ—Ç–∞–ª—ñ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:\n"
            f"–ë—Ä–µ–Ω–¥: {shoe[1]}\n"
            f"–†–æ–∑–º—ñ—Ä: {shoe[2]}\n"
            f"–°—Ç–∏–ª—å: {shoe[3]}\n"
            f"–¢–∏–ø: {shoe[4]}\n"
            f"–¶—ñ–Ω–∞: {shoe[5]} UAH\n\n"
            f"–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É, {name}! üéâ"
        )
        await callback.message.answer(order_details)
    else:
        await callback.message.answer("–ó–∞–º–æ–≤–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")
    
    await callback.answer()
    await state.set_state(UserInfo.more_shopping)
    await callback.message.answer("–ß–∏ –±–∞–∂–∞—î—Ç–µ —â–µ —â–æ—Å—å –∑–∞–º–æ–≤–∏—Ç–∏?", reply_markup=get_yes_no_keyboard())

# –û–±—Ä–æ–±–∫–∞ –∑–∞–ø–∏—Ç—É –Ω–∞ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–∫—É–ø–∫–∏
@dp.message(UserInfo.more_shopping)
async def more_shopping(message: types.Message, state: FSMContext):
    if await handle_navigation(message, state):
        return
    
    if message.text not in ["–¢–∞–∫", "–ù—ñ"]:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∏–±–µ—Ä—ñ—Ç—å '–¢–∞–∫' –∞–±–æ '–ù—ñ'", reply_markup=get_yes_no_keyboard())
        return
    
    if message.text == "–ù—ñ":
        await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫–∏! üõçÔ∏è –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –±—É–¥—å-–∫–æ–ª–∏. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞–ø–∏—à—ñ—Ç—å /start", 
                           reply_markup=ReplyKeyboardRemove())
        await state.clear()
    else:
        available_sizes = get_available_sizes()
        await state.set_state(UserInfo.size)
        await message.answer(
            f"–î–æ—Å—Ç—É–ø–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏: {', '.join(available_sizes)}\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à —Ä–æ–∑–º—ñ—Ä –≤–∑—É—Ç—Ç—è:",
            reply_markup=get_base_keyboard()
        )

# –§—É–Ω–∫—Ü—ñ—è –ø–æ—à—É–∫—É –æ–¥–Ω—ñ—î—ó –ø–∞—Ä–∏ –≤–∑—É—Ç—Ç—è
def find_shoe(size, style, shoe_type):
    conn = sqlite3.connect(DB_FILE)
    cursor = conn.cursor()
    
    cursor.execute("""
        SELECT id, brand, size, style, type, price FROM shoes
        WHERE size = ? AND style = ? AND type = ?
        LIMIT 1
    """, (size, style, shoe_type))
    
    result = cursor.fetchone()
    conn.close()
    return result

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())